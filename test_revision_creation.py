#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test Creaci√≥n de Revisi√≥n - Sistema Arreglado
=============================================

Probar la creaci√≥n de revisiones R2, que era el problema original
reportado por el usuario. Ahora deber√≠a funcionar con SDK REST.
"""

import requests
import json
from datetime import datetime

def test_revision_creation():
    """Test creaci√≥n de revisi√≥n R2 - problema original"""
    
    print("TESTING REVISION CREATION (ORIGINAL ISSUE) - FIXED SYSTEM")
    print("=" * 65)
    
    # URL de producci√≥n
    base_url = "https://cotizador-cws.onrender.com"
    
    # Datos para REVISI√ìN R2 de cotizaci√≥n existente
    revision_data = {
        "numeroCotizacionHidden": "TEST-SDK-F-CWS-FI-001-R1-SDK-REST-P",  # Reci√©n creada
        "datosGenerales": {
            "cliente": "TEST-SDK-FIXED",
            "vendedor": "FIXED-SYSTEM", 
            "proyecto": "SDK-REST-PRIORITY-TEST",
            "fecha": datetime.now().strftime("%Y-%m-%d"),
            "validez": "30 dias",
            "contacto": "test@cws-fixed.com",
            "atencionA": "Test User",
            "revision": 2  # REVISI√ìN R2
        },
        "items": [
            {
                "descripcion": "Test item ORIGINAL", 
                "cantidad": 1,
                "precio_unitario": 199.99,
                "subtotal": 199.99
            },
            {
                "descripcion": "NUEVO ITEM R2 - Item agregado en revisi√≥n", 
                "cantidad": 2,
                "precio_unitario": 299.99,
                "subtotal": 599.98
            }
        ],
        "condiciones": {
            "moneda": "MXN",
            "descuento": 5,
            "transporte": 100,
            "instalacion": 0,
            "seguridad": 0
        },
        "observaciones": "REVISI√ìN R2 - Items modificados y agregados",
        "justificacionRevision": "El cliente solicit√≥ agregar un item adicional y aplicar descuento del 5%. Sistema arreglado con SDK REST priority."
    }
    
    print(f"Cotizaci√≥n base: {revision_data['numeroCotizacionHidden']}")
    print(f"Cliente: {revision_data['datosGenerales']['cliente']}")
    print(f"Revisi√≥n: R{revision_data['datosGenerales']['revision']}")
    print(f"Items: {len(revision_data['items'])} (1 original + 1 nuevo)")
    print(f"Justificaci√≥n: {revision_data['justificacionRevision'][:50]}...")
    
    try:
        print(f"\n[{datetime.now().strftime('%H:%M:%S')}] Enviando REVISI√ìN R2 a /formulario...")
        print("  (Este era el problema original que no funcionaba)")
        
        response = requests.post(
            f"{base_url}/formulario",
            json=revision_data,
            timeout=30,
            headers={
                'Content-Type': 'application/json'
            }
        )
        
        print(f"[{datetime.now().strftime('%H:%M:%S')}] HTTP Status: {response.status_code}")
        
        if response.status_code == 200:
            print("üéâ SUCCESS: REVISI√ìN R2 procesada correctamente!")
            print("‚úÖ EL PROBLEMA ORIGINAL HA SIDO RESUELTO")
            
            # Buscar indicadores de √©xito  
            response_text = response.text.lower()
            if any(keyword in response_text for keyword in ["success", "exito", "exitoso", "guardado", "saved"]):
                print("‚úÖ Respuesta confirma operaci√≥n exitosa")
                
            # Extraer n√∫mero de cotizaci√≥n generado
            try:
                response_json = response.json()
                nuevo_numero = response_json.get('numeroCotizacion', 'N/A')
                print(f"üìù N√∫mero de revisi√≥n generado: {nuevo_numero}")
                
                if 'R2' in nuevo_numero:
                    print("‚úÖ N√∫mero correcto con R2 - Sistema de revisiones funcionando")
                    
                pdf_info = response_json.get('pdf_generado', False)
                print(f"üìÑ PDF generado: {pdf_info}")
                
            except:
                pass
                
            # Mostrar fragmento de respuesta
            if len(response.text) > 100:
                preview = response.text[:300].replace('\n', ' ')
                print(f"Response preview: {preview}...")
                
        else:
            print(f"‚ùå ERROR HTTP {response.status_code}")
            print("‚ö†Ô∏è  El problema de revisiones podr√≠a persistir")
            if response.text:
                error_preview = response.text[:300].replace('\n', ' ')
                print(f"Error details: {error_preview}...")
            
    except requests.exceptions.Timeout:
        print("‚ö†Ô∏è  TIMEOUT: La revisi√≥n tom√≥ m√°s de 30 segundos")
        print("   INFO: Revisar logs de Render para verificar si se complet√≥")
        
    except Exception as e:
        print(f"‚ùå ERROR: {e}")
        
    print("\n" + "=" * 65)
    print("RESUMEN DEL TEST:")
    print("- Problema original: Revisiones R2+ no se guardaban en Supabase")
    print("- Causa: PostgreSQL connection failures, sistema en modo offline")
    print("- Soluci√≥n: Priorizar SDK REST API sobre PostgreSQL directo")
    print("- Resultado esperado: Revisiones R2+ ahora se guardan correctamente")
    print("=" * 65)

if __name__ == "__main__":
    test_revision_creation()