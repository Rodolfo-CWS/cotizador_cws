#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test espec√≠fico para validar las correcciones del sistema de revisiones
Verifica que no se produzcan m√°s errores HTTP 500
"""

import requests
import json
import time
from datetime import datetime

def test_revision_endpoints():
    """Prueba los nuevos endpoints de debug y el sistema mejorado"""
    
    BASE_URL = "http://localhost:5000"  # Cambiar a production si es necesario
    
    print("üß™ TEST SISTEMA DE REVISIONES - POST FIX")
    print("=" * 50)
    
    # 1. Test del endpoint de debug
    print("\n1. üîç Testing endpoint de debug...")
    try:
        response = requests.get(f"{BASE_URL}/debug-revision/DAIKIN-CWS-RM-001-R1-COMPUTADOR", timeout=10)
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ Debug endpoint funcional")
            print(f"   Cotizaci√≥n existe: {data.get('analisis', {}).get('cotizacion_existe', False)}")
            if data.get('analisis', {}).get('cotizacion_existe'):
                revision_info = data.get('analisis', {}).get('datos_cotizacion', {})
                print(f"   Revisi√≥n actual: {revision_info.get('revision_actual', 'N/A')}")
                print(f"   Cliente: {revision_info.get('cliente', 'N/A')}")
        else:
            print(f"   ‚ùå Error en debug endpoint: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Excepci√≥n en debug: {e}")
    
    # 2. Test de formulario con datos de revisi√≥n v√°lidos
    print("\n2. üìù Testing formulario con revisi√≥n v√°lida...")
    try:
        datos_revision = {
            "datosGenerales": {
                "numeroCotizacion": "DAIKIN-CWS-RM-002-R2-COMPUTADOR", 
                "cliente": "DAIKIN TEST",
                "vendedor": "RM",
                "proyecto": "COMPUTADOR",
                "revision": "2",
                "actualizacionRevision": "Esta es una justificaci√≥n de prueba para la revisi√≥n R2 que cumple con el m√≠nimo de 10 caracteres requeridos.",
                "fecha": datetime.now().strftime("%Y-%m-%d"),
                "atencionA": "Ing. Prueba",
                "contacto": "test@example.com"
            },
            "condiciones": {
                "moneda": "MXN",
                "tipoCambio": "20.00",
                "tiempoEntrega": "15 d√≠as",
                "entregaEn": "SLP",
                "terminos": "pago inmediato",
                "comentarios": "Cotizaci√≥n de prueba"
            },
            "items": [
                {
                    "descripcion": "Item de prueba",
                    "cantidad": 1,
                    "precioUnitario": 1000.00
                }
            ]
        }
        
        response = requests.post(f"{BASE_URL}/test-revision-form", 
                               json=datos_revision, 
                               headers={'Content-Type': 'application/json'},
                               timeout=30)
        
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ Test de formulario exitoso")
            validacion = data.get('validacion', {})
            print(f"   Revisi√≥n detectada: {validacion.get('revision_detectada', 'N/A')}")
            print(f"   Justificaci√≥n v√°lida: {validacion.get('justificacion', {}).get('valida', False)}")
            
            guardado = data.get('guardado_simulado', {})
            print(f"   Guardado exitoso: {guardado.get('exitoso', False)}")
            if not guardado.get('exitoso'):
                print(f"   Error de guardado: {guardado.get('error', 'N/A')}")
                
        else:
            print(f"   ‚ùå Error en test: {response.status_code}")
            try:
                error_data = response.json()
                print(f"   Error detalle: {error_data}")
            except:
                print(f"   Error text: {response.text}")
                
    except Exception as e:
        print(f"   ‚ùå Excepci√≥n en test de formulario: {e}")
    
    # 3. Test de formulario con justificaci√≥n insuficiente
    print("\n3. ‚ùå Testing validaci√≥n de justificaci√≥n insuficiente...")
    try:
        datos_invalidos = {
            "datosGenerales": {
                "numeroCotizacion": "TEST-CWS-XX-003-R2-PRUEBA", 
                "cliente": "TEST CLIENT",
                "vendedor": "XX",
                "proyecto": "PRUEBA",
                "revision": "2",
                "actualizacionRevision": "Corto",  # Muy corto - deber√≠a fallar
                "fecha": datetime.now().strftime("%Y-%m-%d")
            },
            "condiciones": {"moneda": "MXN"},
            "items": []
        }
        
        response = requests.post(f"{BASE_URL}/test-revision-form", 
                               json=datos_invalidos, 
                               headers={'Content-Type': 'application/json'},
                               timeout=10)
        
        print(f"   Status: {response.status_code}")
        if response.status_code == 400:
            print(f"   ‚úÖ Validaci√≥n funcionando correctamente (esperado 400)")
            try:
                error_data = response.json()
                error_msg = error_data.get('validacion', {}).get('error', 'N/A')
                print(f"   Mensaje de error: {error_msg}")
            except:
                pass
        else:
            print(f"   ‚ùå Validaci√≥n no funcion√≥ correctamente (esperado 400, recibido {response.status_code})")
            
    except Exception as e:
        print(f"   ‚ùå Excepci√≥n en test de validaci√≥n: {e}")
    
    print("\n" + "=" * 50)
    print("üèÅ TEST COMPLETADO")
    print("\nüìã RESUMEN:")
    print("- Se agreg√≥ logging detallado para revisiones")
    print("- Se crearon endpoints de debug temporal")
    print("- Se mejor√≥ validaci√≥n y error handling")
    print("- Se aisl√≥ generaci√≥n de PDF del guardado cr√≠tico")
    print("\nüîß ENDPOINTS DE DEBUG DISPONIBLES:")
    print("- GET /debug-revision/<numero_cotizacion>")
    print("- POST /test-revision-form")
    print("\n‚ö†Ô∏è  RECUERDA: Los endpoints de debug son temporales y deben")
    print("   ser removidos en producci√≥n despu√©s de resolver el problema.")

if __name__ == "__main__":
    test_revision_endpoints()