"""
Test para validar el flujo completo de "Nueva Revisi√≥n"
Verifica que el bot√≥n aparezca y que el flujo de creaci√≥n de revisiones funcione correctamente
"""

import os
import json
import sys
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

def test_boton_nueva_revision():
    """Test para verificar que el bot√≥n Nueva Revisi√≥n aparece correctamente"""
    print("=== TEST: BOT√ìN NUEVA REVISI√ìN ===")
    
    try:
        # Importar managers
        from supabase_manager import SupabaseManager
        
        # Inicializar manager
        print("\n1. Inicializando SupabaseManager...")
        db_manager = SupabaseManager()
        print(f"   Modo offline: {db_manager.modo_offline}")
        
        # Buscar una cotizaci√≥n existente para probar
        print("\n2. Buscando cotizaci√≥n de prueba...")
        resultado_busqueda = db_manager.buscar_cotizaciones("", 1, 5)
        
        if not resultado_busqueda.get("error") and resultado_busqueda.get("resultados"):
            cotizaciones = resultado_busqueda["resultados"]
            print(f"   Encontradas {len(cotizaciones)} cotizaciones")
            
            for i, cot in enumerate(cotizaciones[:2]):
                numero_cotizacion = cot.get('numeroCotizacion', 'N/A')
                print(f"\n   Cotizaci√≥n {i+1}: {numero_cotizacion}")
                
                # Verificar campos necesarios para el bot√≥n
                campos_necesarios = ['numeroCotizacion', 'numero_cotizacion', '_id']
                campos_disponibles = []
                
                for campo in campos_necesarios:
                    if cot.get(campo):
                        campos_disponibles.append(f"{campo}: '{cot[campo]}'")
                
                print(f"     Campos para bot√≥n: {', '.join(campos_disponibles)}")
                
                # Simular la l√≥gica del template
                revision_id = cot.get('numeroCotizacion') or cot.get('numero_cotizacion') or cot.get('_id')
                boton_disponible = bool(revision_id)
                
                print(f"     ‚úÖ Bot√≥n 'Nueva Revisi√≥n': {'VISIBLE' if boton_disponible else 'OCULTO'}")
                if boton_disponible:
                    print(f"     URL: /formulario?revision={revision_id}")
        else:
            print("   ‚ö†Ô∏è No se encontraron cotizaciones de prueba")
            return False
        
        print("\n‚úÖ Test de bot√≥n completado")
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERROR en test de bot√≥n: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_flujo_nueva_revision():
    """Test para verificar el flujo completo de creaci√≥n de revisiones"""
    print("\n=== TEST: FLUJO NUEVA REVISI√ìN ===")
    
    try:
        # Importar managers y funciones
        from supabase_manager import SupabaseManager
        import sys
        import os
        
        # A√±adir directorio actual al path para importar app
        sys.path.append(os.path.dirname(__file__))
        
        # Importar funci√≥n de preparaci√≥n de revisiones
        from app import preparar_datos_nueva_revision
        
        # Inicializar manager
        print("\n1. Inicializando SupabaseManager...")
        db_manager = SupabaseManager()
        
        # Buscar cotizaci√≥n de prueba
        print("\n2. Obteniendo cotizaci√≥n de prueba...")
        resultado_busqueda = db_manager.buscar_cotizaciones("", 1, 1)
        
        if not resultado_busqueda.get("error") and resultado_busqueda.get("resultados"):
            cotizacion_original = resultado_busqueda["resultados"][0]
            numero_original = cotizacion_original.get('numeroCotizacion', 'N/A')
            print(f"   Cotizaci√≥n original: {numero_original}")
            
            # Test 1: Preparar datos para nueva revisi√≥n
            print("\n3. Preparando datos para nueva revisi√≥n...")
            try:
                datos_revision = preparar_datos_nueva_revision(cotizacion_original)
                
                # Verificar campos clave
                datos_generales = datos_revision.get('datosGenerales', {})
                revision_nueva = datos_generales.get('revision', 'N/A')
                numero_nuevo = datos_generales.get('numeroCotizacion', 'N/A')
                
                print(f"   ‚úÖ Revisi√≥n incrementada: {revision_nueva}")
                print(f"   ‚úÖ N√∫mero nuevo: {numero_nuevo}")
                
                # Verificar que el n√∫mero cambi√≥
                if numero_nuevo != numero_original:
                    print(f"   ‚úÖ N√∫mero actualizado correctamente")
                else:
                    print(f"   ‚ö†Ô∏è N√∫mero no cambi√≥: {numero_original} ‚Üí {numero_nuevo}")
                
                # Verificar formato de n√∫mero (deber√≠a incluir nuevas iniciales de vendedor)
                if 'CWS' in numero_nuevo:
                    print(f"   ‚úÖ Formato CWS correcto")
                else:
                    print(f"   ‚ö†Ô∏è Formato CWS incorrecto: {numero_nuevo}")
                
                # Verificar que mantiene los datos originales
                items_originales = len(cotizacion_original.get('items', []))
                items_revision = len(datos_revision.get('items', []))
                print(f"   ‚úÖ Items preservados: {items_originales} ‚Üí {items_revision}")
                
            except Exception as e:
                print(f"   ‚ùå Error preparando revisi√≥n: {e}")
                return False
            
            # Test 2: Simular obtenci√≥n de cotizaci√≥n por n√∫mero (como en formulario)
            print("\n4. Simulando b√∫squeda para formulario...")
            resultado_obtencion = db_manager.obtener_cotizacion(numero_original)
            
            if resultado_obtencion.get('encontrado'):
                print(f"   ‚úÖ Cotizaci√≥n encontrada por n√∫mero: {numero_original}")
                cotizacion_encontrada = resultado_obtencion['item']
                print(f"   ‚úÖ Campos disponibles: {list(cotizacion_encontrada.keys())}")
            else:
                print(f"   ‚ö†Ô∏è Cotizaci√≥n no encontrada por n√∫mero: {numero_original}")
            
            # Test 3: Verificar que la funci√≥n generar_numero_revision funciona
            print("\n5. Probando generaci√≥n de n√∫mero de revisi√≥n...")
            try:
                if hasattr(db_manager, 'generar_numero_revision'):
                    numero_r2 = db_manager.generar_numero_revision(numero_original, "2")
                    numero_r3 = db_manager.generar_numero_revision(numero_original, "3")
                    
                    print(f"   ‚úÖ R1: {numero_original}")
                    print(f"   ‚úÖ R2: {numero_r2}")
                    print(f"   ‚úÖ R3: {numero_r3}")
                else:
                    print(f"   ‚ö†Ô∏è Funci√≥n generar_numero_revision no disponible")
            except Exception as e:
                print(f"   ‚ö†Ô∏è Error generando n√∫meros de revisi√≥n: {e}")
        
        else:
            print("   ‚ö†Ô∏è No se encontraron cotizaciones para probar")
            return False
        
        print("\n‚úÖ Test de flujo completado exitosamente")
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERROR en test de flujo: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_template_debugging():
    """Test para simular el debugging del template"""
    print("\n=== TEST: DEBUGGING TEMPLATE ===")
    
    try:
        from supabase_manager import SupabaseManager
        
        # Inicializar manager
        db_manager = SupabaseManager()
        
        # Obtener una cotizaci√≥n
        resultado_busqueda = db_manager.buscar_cotizaciones("", 1, 1)
        
        if not resultado_busqueda.get("error") and resultado_busqueda.get("resultados"):
            cotizacion = resultado_busqueda["resultados"][0]
            
            print("\n1. Simulando l√≥gica del template...")
            
            # Simular la l√≥gica exacta del template
            numero_cotizacion = cotizacion.get('numeroCotizacion') or cotizacion.get('numero_cotizacion') or cotizacion.get('_id')
            
            print(f"   numeroCotizacion: {repr(cotizacion.get('numeroCotizacion'))}")
            print(f"   numero_cotizacion: {repr(cotizacion.get('numero_cotizacion'))}")
            print(f"   _id: {repr(cotizacion.get('_id'))}")
            print(f"   Resultado final: {repr(numero_cotizacion)}")
            
            if numero_cotizacion:
                print(f"\n   ‚úÖ BOT√ìN VISIBLE - URL: /formulario?revision={numero_cotizacion}")
            else:
                print(f"\n   ‚ùå BOT√ìN OCULTO")
                print(f"   Campos disponibles: {list(cotizacion.keys())}")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERROR en test de template: {e}")
        return False

if __name__ == "__main__":
    print("üîÑ INICIANDO TESTS DE NUEVA REVISI√ìN")
    
    # Test 1: Verificar bot√≥n
    boton_ok = test_boton_nueva_revision()
    
    # Test 2: Verificar flujo
    flujo_ok = test_flujo_nueva_revision()
    
    # Test 3: Debugging template
    template_ok = test_template_debugging()
    
    # Resumen
    print(f"\n{'='*50}")
    print("üìä RESUMEN DE TESTS:")
    print(f"   Bot√≥n Nueva Revisi√≥n: {'‚úÖ OK' if boton_ok else '‚ùå FALLA'}")
    print(f"   Flujo de Revisi√≥n: {'‚úÖ OK' if flujo_ok else '‚ùå FALLA'}")
    print(f"   Template Debugging: {'‚úÖ OK' if template_ok else '‚ùå FALLA'}")
    
    if boton_ok and flujo_ok and template_ok:
        print(f"\nüéâ TODOS LOS TESTS PASARON - NUEVA REVISI√ìN FUNCIONAL")
    else:
        print(f"\n‚ö†Ô∏è ALGUNOS TESTS FALLARON - REVISAR CONFIGURACI√ìN")
    
    print("\nPara probar manualmente:")
    print("1. Ir a cualquier desglose de cotizaci√≥n")
    print("2. Buscar el bot√≥n 'Nueva Revisi√≥n' (verde)")
    print("3. Hacer clic para abrir formulario pre-cargado")
    print("4. Verificar que la revisi√≥n se increment√≥ (R1‚ÜíR2)")